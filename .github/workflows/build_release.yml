name: Build and Release

on:
  repository_dispatch:
    types: [tag-pushed]

jobs:
  set_versions:
    runs-on: ubuntu-latest
    outputs:
      major: ${{ steps.versions.outputs.major }}
      major_minor: ${{ steps.versions.outputs.major_minor }}
      numerical: ${{ steps.versions.outputs.numerical }}
      full: ${{ steps.versions.outputs.full }}
    steps:
      - id: versions
        run: |
          tag="${{github.event.client_payload.tag}}"
          echo "full=$tag" | tee -a "$GITHUB_OUTPUT"
          numerical=$(echo "$tag" | grep -o -P '^[0-9]+\.[0-9]+\.[0-9]+')
          echo "numerical=$numerical" | tee -a "$GITHUB_OUTPUT"
          major=$(echo "$numerical" | awk -F'.' '{print $1}')
          echo "major=$major" | tee -a "$GITHUB_OUTPUT"
          major_minor=$(echo "$numerical" | awk -F'.' '{printf "%s.%s\n", $1, $2}')
          echo "major_minor=$major_minor" | tee -a "$GITHUB_OUTPUT"

  test-build:
    uses: ./.github/workflows/_build.yml
#    with:
#    secrets:

  release-binaries:
    needs: [test-build, set_versions]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: gitleaks-bulk-ubuntu
          path: ./artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.set_versions.outputs.numerical }}
          files: ./artifacts/gitleaks-bulk
          fail_on_unmatched_files: true

  build-release-docker:
    needs: [ test-build, set_versions ]
    runs-on: ubuntu-latest

    steps:
      - name: Fail if gitleaks version is empty
        run: |
          echo "Error: gitleaks_version is empty"
          exit 1
        if: ${{ needs.test-build.outputs.gitleaks_version == '' }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # IMPORTANT for tag/branch history

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/gitleaks-bulk
          tags: |
            # tag latest for default branch (master)
            type=raw,value=latest,enable={{is_default_branch}}
            # tag semantic versions (e.g., v1.2.3)
            type=semver,pattern={{version}},prefix=
            type=raw,value=${{ needs.set_versions.outputs.major_minor }},prefix=
            type=raw,value=${{ needs.set_versions.outputs.major }},prefix=
            type=raw,value=${{ needs.set_versions.outputs.numerical }},prefix=
            type=raw,value=${{ needs.set_versions.outputs.numerical }}-${{ needs.test-build.outputs.gitleaks_version }},prefix=

          labels: |
            # Standard OCI labels (recommended)
            org.opencontainers.image.title=gitleaks-bulk
            org.opencontainers.image.description=Bulk scan VCS repositories using Gitleaks
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.set_versions.outputs.numerical }}
            org.opencontainers.image.revision=${{ github.sha }}
            gitleaks.version=${{ needs.test-build.outputs.gitleaks_version }}

      - name: Build Docker image for publishing
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: final
          load: true
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Get the image digest after the build
      - name: Get image digest
        id: image_digest
        run: |
          # Get the digest of the locally built image
          IMAGE_ID=$(docker images -q rvegter/gitleaks-bulk:latest)
          IMAGE_DIGEST=$(docker inspect --format='{{index .Id}}' $IMAGE_ID)
          echo "digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT
          echo "Built image digest: $IMAGE_DIGEST"

      - name: Push Docker image to DockerHub
        if: success()
        run: |
          echo "Pushing image with tags: ${{ steps.meta.outputs.tags }}"
          docker push --all-tags rvegter/gitleaks-bulk

      - id: get_dockerhub_tags
        run: |
          DOCKER_TAGS=$(curl -s "https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/gitleaks-bulk/tags" | jq -r '.results[] | "\(.name):\(.digest)"' | tr '\n' ' ')
          echo "DOCKER_TAGS=${DOCKER_TAGS}" >> $GITHUB_ENV

      - name: Generate Supported Tags List for README
        id: generate_readme
        env:
          DOCKERFILE_PATH: "Dockerfile"
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          README_TEMPLATE_PATH: "README.dockerhub_template.md"
          README_OUTPUT: "README.dockerhub.md"
          VERSION_TAG_PATTERN: "^[0-9]+\\.[0-9]+\\.[0-9]+.*"
          LATEST_VERSION: "${{needs.set_versions.outputs.numerical}}"
          LATEST_IMAGE_DIGEST: "${{ steps.image_digest.outputs.digest }}"
          DOCKER_TAGS: ${{ env.DOCKER_TAGS }}
        run: |
          python .github/scripts/readme_docker_tag_section.py --verbose

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        # Only run if the push and readme generation were successful
        if: success() # Or use always() if you want to update even on build failure
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/gitleaks-bulk
          readme-filepath: "README.dockerhub.md"
